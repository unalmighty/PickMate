-- PROFILES
create table if not exists public.profiles (
  id uuid primary key,
  role text check (role in ('grower','picker')) not null default 'grower',
  full_name text,
  region text,
  created_at timestamptz default now()
);
alter table public.profiles enable row level security;

create policy "read own profile" on public.profiles
for select using (auth.uid() = id);

create policy "upsert own profile" on public.profiles
for insert with check (auth.uid() = id);
create policy "update own profile" on public.profiles
for update using (auth.uid() = id);

-- GIGS
create table if not exists public.gigs (
  id bigint generated by default as identity primary key,
  owner uuid not null references public.profiles(id) on delete cascade,
  title text not null,
  region text not null,
  crop text not null,
  start_date date,
  duration_days int,
  rate_type text check (rate_type in ('hourly','piece')) not null,
  rate numeric(10,2) not null,
  accommodation boolean default false,
  transport boolean default false,
  description text,
  contact_phone text,
  accepted_terms boolean default false,
  status text not null default 'active',
  created_at timestamptz default now()
);
alter table public.gigs enable row level security;

create policy "public can read gigs" on public.gigs
for select using (true);

create policy "owner can insert" on public.gigs
for insert with check (owner = auth.uid());

create policy "owner can update/delete" on public.gigs
for update using (owner = auth.uid())
for delete using (owner = auth.uid());

-- APPLICATIONS (optional, for later)
create table if not exists public.applications (
  id bigint generated by default as identity primary key,
  gig_id bigint not null references public.gigs(id) on delete cascade,
  applicant uuid not null references public.profiles(id) on delete cascade,
  message text,
  status text not null default 'applied',
  created_at timestamptz default now()
);
alter table public.applications enable row level security;

create policy "applicant can insert" on public.applications
for insert with check (applicant = auth.uid());

create policy "read own apps" on public.applications
for select using (applicant = auth.uid());

create policy "gig owner reads apps" on public.applications
for select using (
  exists (
    select 1 from public.gigs g
    where g.id = applications.gig_id and g.owner = auth.uid()
  )
);

create policy "gig owner updates status" on public.applications
for update using (
  exists (
    select 1 from public.gigs g
    where g.id = applications.gig_id and g.owner = auth.uid()
  )
);
